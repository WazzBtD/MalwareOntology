import owlready2 as owl
from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import uvicorn
import html
import re


owl.JAVA_EXE = "/usr/lib/jvm/java-8-openjdk/bin/java"
onto = owl.get_ontology('onto.owl').load()

app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

def remove_prefix(inp):
    try:
        inp = str(inp)
        return ''.join(inp.split(sep='.')[1:]).replace('_',' ')
    except:
        return inp

def load_properties():
    object_properties = [ x for x in onto.object_properties()]
    data_properties = [ x for x in onto.data_properties()]
    return object_properties, data_properties

@app.get('/', response_class=HTMLResponse)
async def main_page(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

@app.post('/add_malware', response_class=HTMLResponse)
async def add_malware_post(request: Request):
    '''
    Dodanie nowego indywiduum klasy malware do ontologii
    '''
    form = await request.form()
    mal = onto.Malware(form['malware_name'])
    if form['file_size']:
        mal.rozmiarPliku = int(form['file_size'])
    if form['file_ext']:
        mal.rozszerzeniePliku = form['file_ext']
    if form['date-created']:
        mal.dataUtworzenia = form['date-created']
    if form['date-compiled']:
        mal.dataKompilacji = form['date-compiled']
    if form['date-modified']:
        mal.dataModyfikacji = form['date-modified']
    if form['date-observed']:
        mal.dataZaobserwowania = form['date-observed']
    try:
        if form['malware_family'] != 'Nie dotyczy':
            exec(f'mal.należyDoRodziny = onto.{form["malware_family"]}')
        if form['apt'] != 'Nie dotyczy':
            exec(f'mal.wykorzystywanePrzez.append(onto.{form["apt"]})')
        for s in onto.get_instances_of(onto.Skaner):
            for i in form:
                if s.name == i:
                    exec(f'mal.wykrywanyPrzez.append(onto.{i})')
        for s in onto.get_instances_of(onto.SystemOperacyjny):
            for i in form:
                if s.name == i:
                    exec(f'mal.działaNaSystemie.append(onto.{i})')
        for s in onto.get_instances_of(onto.MetodaAtaku):
            for i in form:
                if s.name == i:
                    exec(f'mal.rozprzestrzeniaSięPrzez.append(onto.{i})')
        for s in onto.get_instances_of(onto.Zachowanie):
            for i in form:
                if s.name == i:
                    exec(f'mal.maZachowanie.append(onto.{i})')
        state = f'Sukces! Dodano indywiduum {form["malware_name"]} do ontologii'
    except Exception as ex:
        print(ex)
        state = f'Błąd! - {ex}'
    return templates.TemplateResponse(
        "added_malware.html", {
            "request": request,
            "state": state
            })

@app.get('/add_malware', response_class=HTMLResponse)
async def add_malware(request: Request):
    '''
    Wyświetlenie formularza dodajacego nowe indywiduum klasy malware do ontologii
    '''
    malware_families = [x.name for x in onto.get_instances_of(onto.Rodzina)]
    apts = [x.name for x in onto.get_instances_of(onto.APT)]
    os = [x.name for x in onto.get_instances_of(onto.SystemOperacyjny)]
    attack_vectors = [x.name for x in onto.get_instances_of(onto.MetodaAtaku)]
    behaviours = [x.name for x in onto.get_instances_of(onto.Zachowanie)]
    scaners = [x.name for x in onto.get_instances_of(onto.Skaner)]
    return templates.TemplateResponse(
        "add_malware.html", {
            "request": request, 
            "malware_families": malware_families,
            'apts': apts,
            'os': os,
            'attack_vectors': attack_vectors,
            'behaviours': behaviours,
            'scaners': scaners
            })

@app.get('/delete_malware/{malware_name}', response_class=HTMLResponse)
async def delete_malware(request: Request, malware_name: str):
    '''
    Usunięcie indywiduum o zadanej nazwie
    '''
    state = f'Nie ma indywiduum o takiej nazwie w ontologii'
    for i in onto.get_instances_of(onto.Malware):
        if i.name == malware_name:
            owl.destroy_entity(i)
            state = f'Usunięto indywiduum {malware_name} z ontologii'
    return templates.TemplateResponse("delete_malware.html", {"request": request, "state": state})

@app.get('/malware', response_class=HTMLResponse)
async def list_malwares(request: Request):
    '''
    Wypisanie wszystkich indywiduów z klasy malware z możliwością edycji/usunięcia
    '''
    data = [x.name for x in onto.get_instances_of(onto.Malware)]
    return templates.TemplateResponse("malware.html", {"request": request, "data": data})

@app.get('/malware_types', response_class=HTMLResponse)
async def list_malwares_by_type(request: Request):
    '''
    Wypisanie wszystkich indywiduów z klasy malware z podziałem na poszczególne podklasy będące typami malware
    '''
    pattern = r'\([\w\._]+\)'
    
    malware_types = [x for x in onto.Malware.descendants() if isinstance(x, onto.Malware)]
    for i in range(len(malware_types)):
        matches = re.finditer(pattern, str(malware_types[i].equivalent_to), re.MULTILINE)
        rules = [match.group()[1:-1] for match in matches]
        malware_types[i] = {
            'malware_type': malware_types[i].name,
            'instances':  [x.name for x in malware_types[i].instances()],
            'rules': [remove_prefix(x) for x in rules]
        }
    return templates.TemplateResponse("malware_types.html", {"request": request, "data": malware_types})

@app.get('/scanners', response_class=HTMLResponse)
async def list_scanners(request: Request):
    '''
    Wypisanie wszystkich indywiduów z klasy skanery i wykrywanych przez dany skaner wirusów.
    '''
    
    scanners = onto.Skaner.instances()
    for i in range(len(scanners)):
        scanners[i] = {
            'scanner_name': scanners[i].name,
            'instances':  [x.name for x in onto.Malware.instances() if scanners[i] in x.wykrywanyPrzez],
        }
    return templates.TemplateResponse("scanners.html", {"request": request, "data": scanners})

@app.get('/malware/{malware_name}', response_class=HTMLResponse)
async def malware_details(request: Request, malware_name: str):
    '''
    Wyświetlenie szczegółów o indywiduum o zadanej nazwie
    '''
    data = {
        'nazwaMalware': malware_name,
        'wykorzystywanePrzez': [],
        'rozprzestrzeniaSięPrzez': [],
        'należyDoRodziny': None,
        'działaNaSystemie': [],
        'maZachowanie': [],
        'wykrywanyPrzez': [],
        'rozszerzeniePliku': None,
        'rozmiarPliku': None,
        'dataModyfikacji': None,
        'dataZaobserwowania': None,
        'dataKompilacji': None,
        'dataUtworzenia': None
        
    }
    for m in onto.get_instances_of(onto.Malware):
        if m.name == malware_name:
            data['typMalware'] = [remove_prefix(x) for x in m.is_a]
            data['wykorzystywanePrzez'] = [remove_prefix(x) for x in m.wykorzystywanePrzez] if  m.wykorzystywanePrzez else ['Brak danych']
            data['rozprzestrzeniaSięPrzez'] = [remove_prefix(x) for x in m.rozprzestrzeniaSięPrzez] if  m.rozprzestrzeniaSięPrzez else ['Brak danych']
            data['działaNaSystemie'] = [remove_prefix(x) for x in m.działaNaSystemie] if  m.działaNaSystemie else ['Brak danych']
            data['maZachowanie'] = [remove_prefix(x) for x in m.maZachowanie] if  m.maZachowanie else ['Brak danych']
            data['należyDoRodziny'] = remove_prefix(m.należyDoRodziny) if  m.należyDoRodziny else 'Brak danych'
            data['wykrywanyPrzez'] = [remove_prefix(x) for x in m.wykrywanyPrzez] if  m.wykrywanyPrzez else ['Brak danych']
            data['rozszerzeniePliku'] = m.rozszerzeniePliku if  m.rozszerzeniePliku else 'Brak danych'
            data['rozmiarPliku'] = m.rozmiarPliku if  m.rozmiarPliku else 'Brak danych'
            data['dataModyfikacji'] = m.dataModyfikacji if  m.dataModyfikacji else 'Brak danych'
            data['dataZaobserwowania'] = m.dataZaobserwowania if  m.dataZaobserwowania else 'Brak danych'
            data['dataKompilacji'] = m.dataKompilacji if  m.dataKompilacji else 'Brak danych'
            data['dataUtworzenia'] = m.dataUtworzenia if  m.dataUtworzenia else 'Brak danych'
    return templates.TemplateResponse(
        "malware_details.html", {
            "request": request,
            "data": data})

@app.get('/reasoner', response_class=HTMLResponse)
async def start_reasoner(request: Request):
    '''
    Uruchomienie reasoner i wyświetlenie wywnioskowanych danych
    '''
    owl.sync_reasoner(infer_property_values=True)
    return templates.TemplateResponse("reasoner.html", {"request": request})

@app.post('/save_changes', response_class=HTMLResponse)
async def save_changes(request: Request):
    '''
    Zapisanie zmian w ontologii
    '''
    form = await request.form()
    try:
        onto.save(file=form['file_name'], format="rdfxml")
        state = f'Sukces! Ontologia zapisana w pliku {form["file_name"]}'
    except Exception as ex:
        state = f'Błąd! {ex}'
    return templates.TemplateResponse("save_changes.html", {"request": request, "state": state})

if __name__ == "__main__":
    uvicorn.run("projekt:app", host="0.0.0.0", port=8000, reload=True, workers=1)
